"""migrations

Revision ID: 1945bb98df54
Revises: eb39eb667fd8
Create Date: 2024-10-29 16:42:07.290768

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1945bb98df54'
down_revision: Union[str, None] = 'eb39eb667fd8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_counts_of_requests_user_id',
                  table_name='counts_of_requests')
    op.drop_table('counts_of_requests')
    op.drop_constraint('model_limits_rate_id_fkey',
                       'model_limits', type_='foreignkey')
    op.drop_constraint('users_rate_id_fkey', 'users', type_='foreignkey')
    op.drop_table('rate')
    op.drop_index('ix_model_limits_rate_id', table_name='model_limits')
    op.drop_table('model_limits')
    op.drop_index('ix_users_rate_id', table_name='users')
    op.drop_column('users', 'subscription_end_time')
    op.drop_column('users', 'rate_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('rate_id', sa.INTEGER(),
                  autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('subscription_end_time',
                  postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_foreign_key('users_rate_id_fkey', 'users', 'rate', [
                          'rate_id'], ['id'], ondelete='CASCADE')
    op.create_index('ix_users_rate_id', 'users', ['rate_id'], unique=False)
    op.create_table('model_limits',
                    sa.Column('id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('rate_id', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('model', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('daily_limit', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(
                        ['rate_id'], ['rate.id'], name='model_limits_rate_id_fkey', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='model_limits_pkey')
                    )
    op.create_index('ix_model_limits_rate_id',
                    'model_limits', ['rate_id'], unique=False)
    op.create_table('rate',
                    sa.Column('id', sa.INTEGER(), server_default=sa.text(
                        "nextval('rate_id_seq'::regclass)"), autoincrement=True, nullable=False),
                    sa.Column('name', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('price', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('price_3', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('price_6', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('price_12', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name='rate_pkey'),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('counts_of_requests',
                    sa.Column('id', sa.INTEGER(),
                              autoincrement=True, nullable=False),
                    sa.Column('user_id', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.Column('model', postgresql.ENUM('GPT_4O', 'GPT_4O_MINI', 'DALL_E_3',
                                                       name='modelsenum'), autoincrement=False, nullable=True),
                    sa.Column('count', sa.INTEGER(),
                              autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], [
                        'users.id'], name='counts_of_requests_user_id_fkey', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint(
                        'id', name='counts_of_requests_pkey')
                    )
    op.create_index('ix_counts_of_requests_user_id',
                    'counts_of_requests', ['user_id'], unique=False)
    # ### end Alembic commands ###
